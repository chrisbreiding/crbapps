// Generated by CoffeeScript 1.4.0
(function() {
  var Events, calculation, calculator, calculatorApp, extend,
    __hasProp = {}.hasOwnProperty;

  Events = {
    events: {},
    on: function(event, handler) {
      var _base, _ref;
      if ((_ref = (_base = this.events)[event]) == null) {
        _base[event] = [];
      }
      return this.events[event].push(handler);
    },
    off: function(event) {
      return delete this.events[event];
    },
    trigger: function(event, arg) {
      var handler, handlers, _i, _len, _results;
      handlers = this.events[event];
      if (handlers) {
        _results = [];
        for (_i = 0, _len = handlers.length; _i < _len; _i++) {
          handler = handlers[_i];
          _results.push(handler.call(this, arg));
        }
        return _results;
      }
    }
  };

  extend = function(target, source) {
    var prop, value, _results;
    _results = [];
    for (prop in source) {
      if (!__hasProp.call(source, prop)) continue;
      value = source[prop];
      _results.push(target[prop] = value);
    }
    return _results;
  };

  calculator = {
    ACCURACY: 1000,
    op: {
      '+': function(a, b) {
        return (a * calculator.ACCURACY + b * calculator.ACCURACY) / calculator.ACCURACY;
      },
      '-': function(a, b) {
        return (a * calculator.ACCURACY - b * calculator.ACCURACY) / calculator.ACCURACY;
      },
      '*': function(a, b) {
        return ((a * calculator.ACCURACY) * (b * calculator.ACCURACY)) / (calculator.ACCURACY * calculator.ACCURACY);
      },
      '/': function(a, b) {
        return (a * calculator.ACCURACY) / (b * calculator.ACCURACY);
      }
    }
  };

  extend(calculator, Events);

  calculator.Calculation = (function() {

    function Calculation() {
      this.reset();
    }

    Calculation.prototype.reset = function() {
      this.result = {
        value: '0',
        type: null
      };
      this.collection = [];
      return calculator.trigger('result:change', '0');
    };

    Calculation.prototype.setResult = function(value, type) {
      this.result = {
        value: value || this.result.value,
        type: type || this.result.type
      };
      return calculator.trigger('result:change', this.result.value);
    };

    Calculation.prototype.calculate = function() {
      var coll, num1, num2, operator;
      coll = this.collection;
      if (!coll.length) {
        return;
      }
      while (coll.length > 1) {
        num1 = parseFloat(coll[0].value);
        operator = coll[1].value;
        num2 = parseFloat(coll[2].value);
        coll[2].value = calculator.op[operator](num1, num2);
        coll.shift();
        coll.shift();
      }
      return this.setResult(coll[0].value, 'calc');
    };

    return Calculation;

  })();

  calculator.Number = (function() {

    function Number(value, type) {
      this.value = value;
      this.type = type != null ? type : 'num';
    }

    Number.prototype.process = function() {
      var cC, prevType, type, value;
      cC = calculation.collection;
      prevType = calculation.result.type;
      value = this.value;
      type = this.type;
      if (this.value === '.') {
        if (cC.length > 1 && /\./.test(cC[cC.length - 1].value) && prevType !== 'calc') {
          return;
        }
        if (!prevType || prevType === 'calc') {
          value = '0.';
          type = 'num';
        }
      }
      if (prevType === 'calc') {
        cC[0].value = value;
      } else if (prevType === type) {
        value = cC[cC.length - 1].value = cC[cC.length - 1].value + value;
      } else {
        cC.push({
          value: value,
          type: type
        });
      }
      return calculation.setResult(value, type);
    };

    return Number;

  })();

  calculator.Operator = (function() {

    function Operator(value, type) {
      this.value = value;
      this.type = type != null ? type : 'op';
    }

    Operator.prototype.process = function() {
      var cC, prevType, type, value;
      cC = calculation.collection;
      prevType = calculation.result.type;
      value = this.value;
      type = this.type;
      if (!cC.length) {
        cC.push({
          value: '0',
          type: 'num'
        });
      }
      if (prevType === type) {
        cC[cC.length - 1].value = value;
      } else {
        cC.push({
          value: value,
          type: type
        });
      }
      return calculation.setResult(value, type);
    };

    return Operator;

  })();

  calculator.Clear = (function() {

    function Clear(value, type) {
      this.value = value != null ? value : 'C';
      this.type = type != null ? type : 'op';
    }

    Clear.prototype.process = function() {
      return calculation.reset();
    };

    return Clear;

  })();

  calculation = new calculator.Calculation();

  calculatorApp = angular.module('calculatorApp', []);

  calculatorApp.controller('CalcCtrl', function($scope) {
    $scope.buttons = [new calculator.Number('7'), new calculator.Number('8'), new calculator.Number('9'), new calculator.Operator('+'), new calculator.Number('4'), new calculator.Number('5'), new calculator.Number('6'), new calculator.Operator('-'), new calculator.Number('1'), new calculator.Number('2'), new calculator.Number('3'), new calculator.Operator('/'), new calculator.Number('0'), new calculator.Number('.'), new calculator.Clear(), new calculator.Operator('*')];
    $scope.buttonClick = function(button) {
      return button.process();
    };
    $scope.calculate = function() {
      return calculation.calculate();
    };
    return calculator.on('result:change', function(result) {
      return $scope.result = result;
    });
  });

}).call(this);
